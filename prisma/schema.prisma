// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  username String @unique
  email    String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
  Quiz Quiz[]
  Attempt Attempt[]
  Submission Submission[]
}

model Quiz {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  title          String
  topic          String
  totalQuestions Int
  timePerQuestion Int
  quizType       String
  roomCode       String   @unique
  expiredAt      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id])

  @@map("quizzes")
  Question Question[]
  Attempt Attempt[]
  Submission Submission[]
}

model Question {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId         String   @db.ObjectId
  questionNumber Int
  questionText   String
  correctOption  String
  options        Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  quiz           Quiz     @relation(fields: [quizId], references: [id])

  @@map("questions")
  Submission Submission[]
}

model Attempt {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String   @db.ObjectId
  quizId                  String   @db.ObjectId
  result                  Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user                    User     @relation(fields: [userId], references: [id])
  quiz                    Quiz     @relation(fields: [quizId], references: [id])

  @@map("attempts")
  Submission Submission[]
}

model Submission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  attemptId   String   @db.ObjectId
  quizId      String   @db.ObjectId
  questionId  String   @db.ObjectId
  answer      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  attempt     Attempt  @relation(fields: [attemptId], references: [id])
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  question    Question @relation(fields: [questionId], references: [id])

  @@map("submissions")
}




